package SwingExamples;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;

public class SwingTest extends JFrame {

	/**
	 * 
	 */
	private static final long serialVersionUID = 8978290962753919447L;

	public SwingTest() {

		setTitle("Title");
		setDefaultCloseOperation(EXIT_ON_CLOSE);

		final JLabel yellowLabel = new JLabel("Hello World");
		yellowLabel.setOpaque(true);
		yellowLabel.setBackground(Color.yellow);
		yellowLabel.setPreferredSize(new Dimension(200, 80));

		getContentPane().add(yellowLabel, BorderLayout.CENTER);
		final JButton button = new JButton("paff");
		getContentPane().add(button, BorderLayout.NORTH);
		final JButton button2 = new JButton("poff");
		getContentPane().add(button2, BorderLayout.SOUTH);

		class MyActionListener implements ActionListener {
			@Override
			public void actionPerformed(final ActionEvent e) {
				yellowLabel.setText(yellowLabel.getText() + " X");
			}
		}
		final MyActionListener listener = new MyActionListener();
		button.addActionListener(listener);
		button2.addActionListener(new ActionListener() {
			private int counter;
			private int activeActions;
			private String text;

			synchronized private int addAction(final int i) {
				activeActions = Math.max(0, activeActions + i);
				return activeActions;
			}

			@Override
			public void actionPerformed(final ActionEvent e) {
				addAction(1);
				// button pressed
				// show user that processing occurs
				setCursor(new Cursor(Cursor.WAIT_CURSOR));
				// background thread for the heavy duty
				final Thread ht = new Thread() {
					@Override
					synchronized public void run() {
						// the heavy duty
						for (long i = 0; i < 1_000_000_000L; ++i) {
						}
						if (text == null) {
							text = button2.getText();
						}
						counter++;
						// end heavy duty
						// new thread to change swing elements, needed for
						// threadsafety
						EventQueue.invokeLater(new Runnable() {
							@Override
							public void run() {
								button2.setText(text + " " + counter);
								yellowLabel.setText(yellowLabel.getText() + " -");

								if (addAction(-1) < 1) {
									setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
								}
							}
						});
					}
				};
				ht.start();
			}
		});

		pack();
	}

	public static void main(final String[] args) {
		final JFrame f = new SwingTest();
		f.setVisible(true);
	}

}
