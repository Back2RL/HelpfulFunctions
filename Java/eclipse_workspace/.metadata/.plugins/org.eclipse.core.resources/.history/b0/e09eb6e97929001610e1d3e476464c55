package Gauß;

public class GaussPivot {
	public static final double SMALL_NUMBER = 1E-8;

	/**
	 * berechnet für eine NxN Matrix a mit dem Ergebnisvektor Nx1 b die
	 * Koeffizienten;
	 * 
	 * @param a
	 *            NxN Matrix
	 * @param b
	 *            Nx1 Matrix
	 * @return Nx1 Matrix mit den Koeffizienten oder null falls die Berechnung
	 *         fehlschlägt
	 */
	public static double[] gaussPivot(final double[][] a, final double[] b) {

		final int zeilen = a.length;
		// existieren Zeilen
		if (zeilen < 1) {
			System.out.println("Zeilen > 0 erwartet");
			return null;
		}
		final int spalten = a[0].length;
		// existieren Spalten und sind es genauso viele wie Zeilen
		if (spalten < 1 || spalten != zeilen) {
			System.out.println("Spalten > 0 erwartet");
			return null;
		}
		// hat b die gleiche Zeilenanzahl
		if (b.length != zeilen) {
			System.out.println("Zeilen von b != Zeilen von a");
			return null;
		}

		final int[] p = new int[zeilen];
		// Vektor zum Merken der Reihenfolge initialisieren
		for (int i = 0; i < zeilen; ++i) {
			p[i] = i;
		}

		// In Dreiecksform umwandeln
		for (int i = 1; i < zeilen; ++i) {
			// Zeilenpivotisierung
			int m = i;
			for (int j = i; i < zeilen; ++j) {
				if (Math.abs(a[p[j]][i]) > Math.abs(a[p[m]][i])) {
					m = j;
				}
			}
			if (p[m] != p[i]) {
				final int t = p[i];
				p[i] = p[m];
				p[m] = t;
			}

			// 1. spalte auf 1 bringen
			for (int zeile = i; zeile < zeilen - 1; ++zeile) {
				// Abbruch falls Diagonalelement == 0
				if (Math.abs(a[i][i] - 0.0) < SMALL_NUMBER) {
					System.out.println("Elem " + i + "," + i + " is 0, abort");
					return null;
				}
				// Faktor mit dem multipliziert wird um das 1. element der
				// nächsten gewählten Zeile auf 0 zu
				// bringen
				final double factor = a[zeile + 1][i] / a[i][i];

				// Null erzeugen in dem von jeder Zeile (mit Ausnahme der
				// ersten)
				// die mit dem Faktor multiplizuirte Erste abgezogen wird
				for (int spalte = i; spalte < spalten; ++spalte) {
					a[zeile + 1][spalte] -= factor * a[i][spalte];
				}
				b[zeile + 1] -= factor * b[i];
			}
		}
	}

	// Rueckwertssubstitution x = zeros(n, 1);b=

	b(p(1:n));
		A = A(p(1:n),:);
		for i=n:-1:1
			x(i) = (b(i)-A(i,i+1:n)*x(i+1:n)) / A(i,i);
		final end
		x
		// debug
		for (int i = 0; i < zeilen; ++i) {
			for (final double number : a[i]) {
				System.out.print(number + ", ");

			}
			System.out.println(b[i] + ", ");
		}
		return b;
	}

	// TESTING
	public static void main(final String[] args) {
		final double[][] a = { { 7, 3, -5 }, { -1, -2, 4 }, { -4, 1, -3 } };
		final double[] b = { -12, 5, 1 };
		// lösung -1,0,1
		final double[] result = GaussPivot.gaussPivot(a, b);
		System.out.println("Ergebnis:");
		for (final double number : result) {
			System.out.print(number + ", ");

		}
		System.out.println();
	}

}
