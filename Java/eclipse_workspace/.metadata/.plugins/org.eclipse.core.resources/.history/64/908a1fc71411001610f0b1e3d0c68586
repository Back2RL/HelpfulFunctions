package Aufgabe_6;

public class SinglyLinkedList {
	private static final boolean WITH_CHECK = false;

	private Node head;
	private Node tail;

	public SinglyLinkedList() {
		head = new Node();
		tail = new Node();
		head.setPointer(tail);
		tail.setPointer(head);
	}

	// b
	public Node get(int value) {
		Node currSelected = head.getPointer();
		while (!currSelected.equals(tail) && currSelected.getValue() != value) {
			currSelected = currSelected.getPointer();
		}
		if (currSelected.equals(tail)) {
			return null;
		}
		return currSelected;
	}

	public static void insert(Node x, Node p, SinglyLinkedList L) {
		if (WITH_CHECK) {
			if (!L.contains(p))
				throw new IllegalArgumentException("Node is not entry of List");
		}

		x.setPointer(p.getPointer());
		p.setPointer(x);
		// tail umbiegen falls x neues letztes Element ist
		if (x.getPointer().equals(L.tail)) {
			L.tail.setPointer(x);
		}
	}

	public boolean contains(Node p) {
		Node currSelected = head.getPointer();
		while (!currSelected.equals(tail) && currSelected.equals(p)) {
			currSelected = currSelected.getPointer();
		}
		if (currSelected.equals(tail)) {
			return false;
		}
		return true;
	}
}
